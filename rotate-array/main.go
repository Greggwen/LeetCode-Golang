package main

// 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

// 示例 1:

// 输入: [1,2,3,4,5,6,7] 和 k = 3
// 输出: [5,6,7,1,2,3,4]
// 解释:
// 向右旋转 1 步: [7,1,2,3,4,5,6]
// 向右旋转 2 步: [6,7,1,2,3,4,5]
// 向右旋转 3 步: [5,6,7,1,2,3,4]
// 示例 2:

// 输入: [-1,-100,3,99] 和 k = 2
// 输出: [3,99,-1,-100]
// 解释:
// 向右旋转 1 步: [99,-1,-100,3]
// 向右旋转 2 步: [3,99,-1,-100]

// 说明:

// 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
// 要求使用空间复杂度为 O(1) 的原地算法。

// 旋转数组这个题目是很容易想到很多解决方法，但这个题目有一个重要的要求： 使用空间复杂度为O(1)的原地算法。什么是原地算法，维基百科的解释：基本上不需要额外辅助的数据结构,然而,允许少量额外的辅助变量来转换数据的算法。当算法运行时，输入的数据通常会被要输出的部分覆盖掉。

import (
	"fmt"
)

func main() {
	arr := []int{1, 2, 3, 4, 5, 6, 7}
	k := 3

	rotate(arr, k)

	fmt.Println(arr)
}

// func rotate(nums []int, k int) []int {  // 非原地算法

// 	len := len(nums)
// 	k = k % len

// 	s1 := nums[:len-k]
// 	nums = nums[len-k:]

// 	for i := 0; i < len-k; i++ {
// 		nums = append(nums, s1[i])
// 	}

// 	return nums
// }

func rotate(nums []int, k int) {
	l := k % len(nums)

	if l > 0 {
		copy(nums, append(nums[len(nums)-l:], nums[0:len(nums)-l]...))
	}

}
